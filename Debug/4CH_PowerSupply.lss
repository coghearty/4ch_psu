
4CH_PowerSupply.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000003ae  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080012a  0080012a  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013a5  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab6  00000000  00000000  00001945  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a1  00000000  00000000  000023fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000535  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000be  00000000  00000000  00003215  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000032d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0
  a8:	aa 32       	cpi	r26, 0x2A	; 42
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	aa e2       	ldi	r26, 0x2A	; 42
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a0 33       	cpi	r26, 0x30	; 48
  ba:	b2 07       	cpc	r27, r18
  bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
  be:	0e 94 65 00 	call	0xca	; 0xca <main>
  c2:	0c 94 d5 01 	jmp	0x3aa	; 0x3aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <main>:
#include "usart.h"



static void init_ports(void){
 	PORTA = 0x00;
  ca:	1b ba       	out	0x1b, r1	; 27
	DDRA = EN_PWR | CH1_BOOST | CH1_EN | CH2_BOOST | CH2_EN | CH3_BOOST;	//set direction register
  cc:	8b ed       	ldi	r24, 0xDB	; 219
  ce:	8a bb       	out	0x1a, r24	; 26
 	PORTA = CH1_ILIM | CH2_ILIM;	//set internal pull-up resistors for inputs
  d0:	84 e2       	ldi	r24, 0x24	; 36
  d2:	8b bb       	out	0x1b, r24	; 27
 		
	DDRB = CH1_ISET | CH2_ISET | CH3_ISET | CH4_ISET;
  d4:	90 ef       	ldi	r25, 0xF0	; 240
  d6:	97 bb       	out	0x17, r25	; 23
 	PORTB = 0x00;
  d8:	18 ba       	out	0x18, r1	; 24
 	
	PORTC = 0x00;
  da:	15 ba       	out	0x15, r1	; 21
 	DDRC |= WIFI_EN | LED_GRN | LED_RED | CH4_EN | CH4_BOOST | CH3_EN;
  dc:	84 b3       	in	r24, 0x14	; 20
  de:	8f 66       	ori	r24, 0x6F	; 111
  e0:	84 bb       	out	0x14, r24	; 20
 	PORTC = LED_GRN | LED_RED;		//set initial output state high
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	85 bb       	out	0x15, r24	; 21
 	PORTC |= CH4_ILIM | CH3_ILIM;	//set input pull-up resistors
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	80 69       	ori	r24, 0x90	; 144
  ea:	85 bb       	out	0x15, r24	; 21
 	
 	DDRD |= SW_AUTO | SW_OFF | SW_ON | PB_SNOOZE;
  ec:	81 b3       	in	r24, 0x11	; 17
  ee:	80 6f       	ori	r24, 0xF0	; 240
  f0:	81 bb       	out	0x11, r24	; 17
 	PORTD = SW_AUTO | SW_OFF | SW_ON | PB_SNOOZE;	//set input pull-up resistors
  f2:	92 bb       	out	0x12, r25	; 18
	 
	DDRE |= SW_ENC1 | SW_ENC2 | ENC1B | ENC1A | ENC2B | ENC2A;
  f4:	82 b1       	in	r24, 0x02	; 2
  f6:	8c 6f       	ori	r24, 0xFC	; 252
  f8:	82 b9       	out	0x02, r24	; 2
	PORTE |= SW_ENC1 | SW_ENC2;
  fa:	83 b1       	in	r24, 0x03	; 3
  fc:	8c 60       	ori	r24, 0x0C	; 12
  fe:	83 b9       	out	0x03, r24	; 3
 }
 
 static void set_initial_IO_states(void){
	 /*start with all LEDs off*/
	 CH1_led(0);
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 44 01 	call	0x288	; 0x288 <CH1_led>
	 CH2_led(0);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 4a 01 	call	0x294	; 0x294 <CH2_led>
	 CH3_led(0);
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <CH3_led>
	 CH4_led(0);
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	0e 94 56 01 	call	0x2ac	; 0x2ac <CH4_led>
	 /*ensure all boost modes are off*/
	 CH1_boost(0);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <CH1_boost>
	 CH2_boost(0);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 6e 01 	call	0x2dc	; 0x2dc <CH2_boost>
	 CH3_boost(0);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 74 01 	call	0x2e8	; 0x2e8 <CH3_boost>
	 CH4_boost(0);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <CH4_boost>
	 /*ensure main power is disabled*/
	 EN_power(0);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 80 01 	call	0x300	; 0x300 <EN_power>
	 /*ensure wifi is off*/
	 EN_wifi(0);
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 86 01 	call	0x30c	; 0x30c <EN_wifi>
int main(void)
{
	init_ports();
	set_initial_IO_states();
	
	init_PC_serial(MYUBRR);
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 8c 01 	call	0x318	; 0x318 <init_PC_serial>
	
	stdout = &usart_output;
 144:	ea e2       	ldi	r30, 0x2A	; 42
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	8e e0       	ldi	r24, 0x0E	; 14
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	93 83       	std	Z+3, r25	; 0x03
 14e:	82 83       	std	Z+2, r24	; 0x02
	stdin  = &usart_input;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	91 83       	std	Z+1, r25	; 0x01
 156:	80 83       	st	Z, r24
	
	unsigned char sendData = 'H';
	char input;
	
	red_led(1);
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <red_led>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f e9       	ldi	r18, 0x9F	; 159
 160:	86 e8       	ldi	r24, 0x86	; 134
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0x9a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0xa4>
 16e:	00 00       	nop
	_delay_ms(500);
	red_led(0);
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 62 01 	call	0x2c4	; 0x2c4 <red_led>
 176:	2f e9       	ldi	r18, 0x9F	; 159
 178:	86 e8       	ldi	r24, 0x86	; 134
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0xb2>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xbc>
 186:	00 00       	nop
	_delay_ms(500);	
	green_led(1);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <green_led>
 18e:	2f e9       	ldi	r18, 0x9F	; 159
 190:	86 e8       	ldi	r24, 0x86	; 134
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0xca>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0xd4>
 19e:	00 00       	nop
	_delay_ms(500);
	green_led(0);
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <green_led>
 1a6:	2f e9       	ldi	r18, 0x9F	; 159
 1a8:	86 e8       	ldi	r24, 0x86	; 134
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0xe2>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xec>
 1b6:	00 00       	nop
	_delay_ms(500);
	
    while (1) 
    {

		CH1_led(1);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 44 01 	call	0x288	; 0x288 <CH1_led>
 1be:	2f e3       	ldi	r18, 0x3F	; 63
 1c0:	8d e0       	ldi	r24, 0x0D	; 13
 1c2:	93 e0       	ldi	r25, 0x03	; 3
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <main+0xfa>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0x104>
 1ce:	00 00       	nop
		_delay_ms(DELAY_TIME);
		CH2_led(1);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 4a 01 	call	0x294	; 0x294 <CH2_led>
 1d6:	2f e3       	ldi	r18, 0x3F	; 63
 1d8:	8d e0       	ldi	r24, 0x0D	; 13
 1da:	93 e0       	ldi	r25, 0x03	; 3
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x112>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x11c>
 1e6:	00 00       	nop
		_delay_ms(DELAY_TIME);
		CH3_led(1);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 50 01 	call	0x2a0	; 0x2a0 <CH3_led>
 1ee:	2f e3       	ldi	r18, 0x3F	; 63
 1f0:	8d e0       	ldi	r24, 0x0D	; 13
 1f2:	93 e0       	ldi	r25, 0x03	; 3
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x12a>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x134>
 1fe:	00 00       	nop
		_delay_ms(DELAY_TIME);
		CH4_led(1);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	0e 94 56 01 	call	0x2ac	; 0x2ac <CH4_led>
 206:	2f e3       	ldi	r18, 0x3F	; 63
 208:	8d e0       	ldi	r24, 0x0D	; 13
 20a:	93 e0       	ldi	r25, 0x03	; 3
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x142>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x14c>
 216:	00 00       	nop
		_delay_ms(DELAY_TIME);	
		green_led(1);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <green_led>
 21e:	2f e3       	ldi	r18, 0x3F	; 63
 220:	8d e0       	ldi	r24, 0x0D	; 13
 222:	93 e0       	ldi	r25, 0x03	; 3
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x15a>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x164>
 22e:	00 00       	nop
		_delay_ms(DELAY_TIME);
		red_led(1);
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 62 01 	call	0x2c4	; 0x2c4 <red_led>
 236:	2f e3       	ldi	r18, 0x3F	; 63
 238:	8d e0       	ldi	r24, 0x0D	; 13
 23a:	93 e0       	ldi	r25, 0x03	; 3
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x172>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x17c>
 246:	00 00       	nop
		_delay_ms(DELAY_TIME);
		CH1_led(0);
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 44 01 	call	0x288	; 0x288 <CH1_led>
		CH2_led(0);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	0e 94 4a 01 	call	0x294	; 0x294 <CH2_led>
		CH3_led(0);
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 50 01 	call	0x2a0	; 0x2a0 <CH3_led>
		CH4_led(0);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 56 01 	call	0x2ac	; 0x2ac <CH4_led>
		green_led(0);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <green_led>
		red_led(0);
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 62 01 	call	0x2c4	; 0x2c4 <red_led>
		//USART_putchar(sendData);
		        puts("Hello world!");
 26c:	8c e1       	ldi	r24, 0x1C	; 28
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 a5 01 	call	0x34a	; 0x34a <puts>
 274:	2f e7       	ldi	r18, 0x7F	; 127
 276:	8a e1       	ldi	r24, 0x1A	; 26
 278:	96 e0       	ldi	r25, 0x06	; 6
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0x1b0>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x1ba>
 284:	00 00       	nop
 286:	98 cf       	rjmp	.-208    	; 0x1b8 <main+0xee>

00000288 <CH1_led>:
#include <stdint.h>
#include <avr/io.h>

/*------ LED FUNCTIONS ------*/
void CH1_led(uint8_t on){
	if(!on)
 288:	81 11       	cpse	r24, r1
 28a:	02 c0       	rjmp	.+4      	; 0x290 <CH1_led+0x8>
	PORTA &= ~CH1_EN;
 28c:	db 98       	cbi	0x1b, 3	; 27
 28e:	08 95       	ret
	else
	PORTA |= CH1_EN;
 290:	db 9a       	sbi	0x1b, 3	; 27
 292:	08 95       	ret

00000294 <CH2_led>:
}

void CH2_led(uint8_t on){
	if(!on)
 294:	81 11       	cpse	r24, r1
 296:	02 c0       	rjmp	.+4      	; 0x29c <CH2_led+0x8>
	PORTA &= ~CH2_EN;
 298:	de 98       	cbi	0x1b, 6	; 27
 29a:	08 95       	ret
	else
	PORTA |= CH2_EN;
 29c:	de 9a       	sbi	0x1b, 6	; 27
 29e:	08 95       	ret

000002a0 <CH3_led>:
}

void CH3_led(uint8_t on){
	if(!on)
 2a0:	81 11       	cpse	r24, r1
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <CH3_led+0x8>
	PORTC &= ~CH3_EN;
 2a4:	ae 98       	cbi	0x15, 6	; 21
 2a6:	08 95       	ret
	else
	PORTC |= CH3_EN;
 2a8:	ae 9a       	sbi	0x15, 6	; 21
 2aa:	08 95       	ret

000002ac <CH4_led>:
}

void CH4_led(uint8_t on){
	if(!on)
 2ac:	81 11       	cpse	r24, r1
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <CH4_led+0x8>
	PORTC &= ~CH4_EN;
 2b0:	ab 98       	cbi	0x15, 3	; 21
 2b2:	08 95       	ret
	else
	PORTC |= CH4_EN;
 2b4:	ab 9a       	sbi	0x15, 3	; 21
 2b6:	08 95       	ret

000002b8 <green_led>:
}

void green_led(uint8_t on){
	if(!on)
 2b8:	81 11       	cpse	r24, r1
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <green_led+0x8>
	PORTC |= LED_GRN;
 2bc:	a9 9a       	sbi	0x15, 1	; 21
 2be:	08 95       	ret
	else
	PORTC &= ~LED_GRN;
 2c0:	a9 98       	cbi	0x15, 1	; 21
 2c2:	08 95       	ret

000002c4 <red_led>:
}

void red_led(uint8_t on){
	if(!on)
 2c4:	81 11       	cpse	r24, r1
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <red_led+0x8>
	PORTC |= LED_RED;
 2c8:	aa 9a       	sbi	0x15, 2	; 21
 2ca:	08 95       	ret
	else
	PORTC &= ~LED_RED;
 2cc:	aa 98       	cbi	0x15, 2	; 21
 2ce:	08 95       	ret

000002d0 <CH1_boost>:
}

/*------ CHANNEL FUNCTIONS ------*/
void CH1_boost(uint8_t on){
	if(!on)
 2d0:	81 11       	cpse	r24, r1
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <CH1_boost+0x8>
	PORTA &= ~CH1_BOOST;
 2d4:	d9 98       	cbi	0x1b, 1	; 27
 2d6:	08 95       	ret
	else
	PORTA |= CH1_BOOST;
 2d8:	d9 9a       	sbi	0x1b, 1	; 27
 2da:	08 95       	ret

000002dc <CH2_boost>:
}

void CH2_boost(uint8_t on){
	if(!on)
 2dc:	81 11       	cpse	r24, r1
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <CH2_boost+0x8>
	PORTA &= ~CH2_BOOST;
 2e0:	dc 98       	cbi	0x1b, 4	; 27
 2e2:	08 95       	ret
	else
	PORTA |= CH2_BOOST;
 2e4:	dc 9a       	sbi	0x1b, 4	; 27
 2e6:	08 95       	ret

000002e8 <CH3_boost>:
}

void CH3_boost(uint8_t on){
	if(!on)
 2e8:	81 11       	cpse	r24, r1
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <CH3_boost+0x8>
	PORTA &= ~CH3_BOOST;
 2ec:	df 98       	cbi	0x1b, 7	; 27
 2ee:	08 95       	ret
	else
	PORTA |= CH3_BOOST;
 2f0:	df 9a       	sbi	0x1b, 7	; 27
 2f2:	08 95       	ret

000002f4 <CH4_boost>:
}

void CH4_boost(uint8_t on){
	if(!on)
 2f4:	81 11       	cpse	r24, r1
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <CH4_boost+0x8>
	PORTC &= ~CH4_BOOST;
 2f8:	ad 98       	cbi	0x15, 5	; 21
 2fa:	08 95       	ret
	else
	PORTC |= CH4_BOOST;
 2fc:	ad 9a       	sbi	0x15, 5	; 21
 2fe:	08 95       	ret

00000300 <EN_power>:
}

void EN_power(uint8_t on){
	if(!on)
 300:	81 11       	cpse	r24, r1
 302:	02 c0       	rjmp	.+4      	; 0x308 <EN_power+0x8>
	PORTA &= ~EN_PWR;
 304:	d8 98       	cbi	0x1b, 0	; 27
 306:	08 95       	ret
	else
	PORTA |= EN_PWR;
 308:	d8 9a       	sbi	0x1b, 0	; 27
 30a:	08 95       	ret

0000030c <EN_wifi>:
}

void EN_wifi(uint8_t on){
	if(!on)
 30c:	81 11       	cpse	r24, r1
 30e:	02 c0       	rjmp	.+4      	; 0x314 <EN_wifi+0x8>
	PORTC &= ~WIFI_EN;
 310:	a8 98       	cbi	0x15, 0	; 21
 312:	08 95       	ret
	else
	PORTC |= WIFI_EN;
 314:	a8 9a       	sbi	0x15, 0	; 21
 316:	08 95       	ret

00000318 <init_PC_serial>:
#include <avr/io.h>
#include <stdio.h>

void init_PC_serial(unsigned int ubrr){
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 318:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 31c:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 31e:	88 e1       	ldi	r24, 0x18	; 24
 320:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	// UCSR0C = (3<<UCSZ00);
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 328:	08 95       	ret

0000032a <USART_putchar>:

}

void USART_putchar(unsigned char c, FILE *stream )
{
 32a:	cf 93       	push	r28
 32c:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 32e:	8a 30       	cpi	r24, 0x0A	; 10
 330:	19 f4       	brne	.+6      	; 0x338 <USART_putchar+0xe>
		USART_putchar('\r', stream);
 332:	8d e0       	ldi	r24, 0x0D	; 13
 334:	0e 94 95 01 	call	0x32a	; 0x32a <USART_putchar>
	}
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 338:	5d 9b       	sbis	0x0b, 5	; 11
 33a:	fe cf       	rjmp	.-4      	; 0x338 <USART_putchar+0xe>
	;
	/* Put data into buffer, sends the data */
	UDR0 = c;
 33c:	cc b9       	out	0x0c, r28	; 12
}
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <USART_getchar>:

void USART_getchar(FILE *stream){
	while( !(UCSR0A & (1<<RXC0)))
 342:	5f 9b       	sbis	0x0b, 7	; 11
 344:	fe cf       	rjmp	.-4      	; 0x342 <USART_getchar>
	;
	return UDR0;
 346:	8c b1       	in	r24, 0x0c	; 12
 348:	08 95       	ret

0000034a <puts>:
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__data_end+0x2>
 356:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <__data_end+0x3>
 35a:	23 81       	ldd	r18, Z+3	; 0x03
 35c:	21 ff       	sbrs	r18, 1
 35e:	1b c0       	rjmp	.+54     	; 0x396 <puts+0x4c>
 360:	8c 01       	movw	r16, r24
 362:	d0 e0       	ldi	r29, 0x00	; 0
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	f8 01       	movw	r30, r16
 368:	81 91       	ld	r24, Z+
 36a:	8f 01       	movw	r16, r30
 36c:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <__data_end+0x2>
 370:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <__data_end+0x3>
 374:	db 01       	movw	r26, r22
 376:	18 96       	adiw	r26, 0x08	; 8
 378:	ed 91       	ld	r30, X+
 37a:	fc 91       	ld	r31, X
 37c:	19 97       	sbiw	r26, 0x09	; 9
 37e:	88 23       	and	r24, r24
 380:	31 f0       	breq	.+12     	; 0x38e <puts+0x44>
 382:	09 95       	icall
 384:	89 2b       	or	r24, r25
 386:	79 f3       	breq	.-34     	; 0x366 <puts+0x1c>
 388:	df ef       	ldi	r29, 0xFF	; 255
 38a:	cf ef       	ldi	r28, 0xFF	; 255
 38c:	ec cf       	rjmp	.-40     	; 0x366 <puts+0x1c>
 38e:	8a e0       	ldi	r24, 0x0A	; 10
 390:	09 95       	icall
 392:	89 2b       	or	r24, r25
 394:	19 f0       	breq	.+6      	; 0x39c <puts+0x52>
 396:	8f ef       	ldi	r24, 0xFF	; 255
 398:	9f ef       	ldi	r25, 0xFF	; 255
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <puts+0x56>
 39c:	8d 2f       	mov	r24, r29
 39e:	9c 2f       	mov	r25, r28
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	08 95       	ret

000003aa <_exit>:
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>
